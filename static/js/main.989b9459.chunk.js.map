{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","Heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","split","join","length","defaultProps","aboutText","Alert","alert","role","msg","App","setAlert","message","setTimeout","setMode","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kMAIe,SAASA,EAAOC,GAC7B,OACE,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACE,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SACCH,EAAMI,QAEP,wBACEH,UAAU,iBACVI,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAPb,SASE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,oBAAIL,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,sBAUJ,sBAAMF,UAAU,WAWhB,sBAAKA,UAAS,sCAA8C,UAAbD,EAAME,KAAe,QAAQ,SAA5E,UACA,uBAAOD,UAAU,mBAAmBI,KAAK,WAAWE,QAASP,EAAMQ,WAAYF,GAAG,2BAClF,uBAAOL,UAAU,mBAAmBQ,QAAQ,yBAA5C,wCC9CK,SAASC,EAASV,GAC7B,IA2BA,EAAwBW,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAGA,OACI,qCACA,sBAAKZ,UAAU,YAAYa,MAAO,CAACC,MAAoB,SAAbf,EAAME,KAAc,QAAQ,SAAtE,UACI,6BAAKF,EAAMgB,UACX,qBAAKf,UAAU,OAAf,SACA,0BAAUA,UAAU,eAAegB,MAAOL,EAAMM,SAZlC,SAACC,GAEnBN,EAAQM,EAAMC,OAAOH,QAUwDH,MAAO,CAACO,gBAA8B,SAAbrB,EAAME,KAAc,UAAU,QAAQa,MAAoB,SAAbf,EAAME,KAAc,QAAQ,SAAUI,GAAG,QAAQgB,KAAK,QAErM,wBAAQrB,UAAU,uBAAuBM,QArC3B,WAGlB,IAAIgB,EAAUX,EAAKY,cACnBX,EAAQU,GACRvB,EAAMyB,UAAU,yBAA0B,YAgCtC,mCACA,wBAAQxB,UAAU,uBAAuBM,QA/B1B,WACnB,IAAIgB,EAAUX,EAAKc,cACnBb,EAAQU,GACRvB,EAAMyB,UAAU,0BAA2B,YA4BvC,mCACA,wBAAQxB,UAAU,uBAAuBM,QA3BxB,WAErBM,EADc,IAEdb,EAAMyB,UAAU,4BAA6B,YAwBzC,0BACA,wBAAQxB,UAAU,uBAAuBM,QAvBvB,WACtB,IAAIgB,EAAUX,EAAKe,MAAM,QACzBd,EAAQU,EAAQK,KAAK,MACrB5B,EAAMyB,UAAU,+CAAgD,YAoB5D,qCAEJ,sBAAKxB,UAAU,iBAAiBa,MAAO,CAAEC,MAAoB,SAAbf,EAAME,KAAc,QAAQ,SAA5E,UACI,oDACA,gCACKU,EAAKe,MAAM,KAAKE,OADrB,cACwCjB,EAAKiB,OAD7C,cAEI,yCAGA,4BACCjB,aDWjBb,EAAO+B,aAAe,CAClB1B,MAAO,gBACP2B,UAAW,mBExDAC,MARf,SAAehC,GACX,OACIA,EAAMiC,OAAS,sBAAKhC,UAAS,sBAAiBD,EAAMiC,MAAM5B,MAAQ6B,KAAK,QAAxD,UACV,iCAASlC,EAAMiC,MAAM5B,OADX,MAC6BL,EAAMiC,MAAME,QC6DjDC,MApDf,WAEE,MAA0BzB,mBAAS,MAAnC,mBAAOsB,EAAP,KAAcI,EAAd,KACMZ,EAAY,SAACa,EAASjC,GAC1BgC,EAAS,CACPF,IAAMG,EACNjC,KAAMA,IAERkC,YAAW,WACTF,EAAS,QACR,MAEL,EAAwB1B,mBAAS,SAAjC,mBAAOT,EAAP,KAAasC,EAAb,KAiBA,OAEE,cADA,CACA,sBAGE,cAACzC,EAAD,CAAQK,MAAM,WAAW2B,UAAY,WAAW7B,KAAMA,EAAMM,WArB7C,WACJ,UAATN,GACFsC,EAAQ,QACRC,SAASC,KAAK5B,MAAMO,gBAAkB,UACtCoB,SAASC,KAAK5B,MAAMC,MAAQ,QAC5BU,EAAU,6BAA8B,aAIxCe,EAAQ,SACRC,SAASC,KAAK5B,MAAMO,gBAAkB,QACtCI,EAAU,8BAA+B,eAWzC,cAAC,EAAD,CAAOQ,MAAOA,IACd,qBAAKhC,UAAU,iBAAf,SAQM,cAACS,EAAD,CAAUe,UAAWA,EAAWT,QAAQ,6BAA6Bd,KAAMA,UC9CxEyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,SAM1BZ,K","file":"static/js/main.989b9459.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n        {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li> */}\r\n          </ul>\r\n          <form className=\"d-flex\">\r\n            {/* <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button> */}\r\n          </form>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'black':'light'}`}>\r\n          <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Enable Darkmode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// To set the datatype of the properies using propTypes\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\n\r\n// To set the placeholder to the prop. \r\nNavbar.defaultProps = {\r\n    title: 'Set time here',\r\n    aboutText: 'About text here'\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const HandleUpClick = ()=>{\r\n        // console.log('HandleUpclick Has Been Fired')\r\n        // setText(\"Converted to Uppercase\")\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n        }\r\n    const HandleLowClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowwercase\", \"success\");\r\n        }\r\n    const HandleClearClick = ()=>{\r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert(\"Text Cleared Successfully\", \"success\");\r\n        }\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Spaces has been removed successfully !\", \"success\");\r\n    }\r\n\r\n    const HandleOnClick = (event)=>{\r\n        // console.log(\"HandleOnClick ahs been Fired\")\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState(\"\")\r\n    // text = \"Wrong\" // Wrong way to change state\r\n    // setText = (\"Right\") // Right way to change state\r\n    return (\r\n        <>\r\n        <div className='container' style={{color: props.mode==='dark'?'white':'black'}} >\r\n            <h1>{props.Heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} onChange={HandleOnClick} style={{backgroundColor: props.mode==='dark'?'#1e2125':'white',color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick= {HandleUpClick} > Change to Uppercase </button>\r\n            <button className=\"btn btn-success mx-1\" onClick= {HandleLowClick} > Change to Lowercase </button>\r\n            <button className=\"btn btn-primary mx-1\" onClick= {HandleClearClick} > Clear Text </button>\r\n            <button className=\"btn btn-success mx-1\" onClick= {handleExtraSpaces} > Remove Extra Space </button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{ color: props.mode==='dark'?'white':'black'}}>\r\n            <h2>Your Text Summary </h2>\r\n            <div>\r\n                {text.split(\" \").length} words and {text.length} characters\r\n                <h2>\r\n                Preview\r\n                </h2>\r\n                <p>\r\n                {text}\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </>\r\n        \r\n\r\n    )   \r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type}`} role=\"alert\">\r\n             <strong>{props.alert.type}</strong> : {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\n// import About from './components/About';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\nfunction App() {\n\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg:  message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  }\n  const [mode, setMode] = useState('light');\n  const toggleMode = ()=>{\n    if (mode === 'light'){ \n      setMode('dark')\n      document.body.style.backgroundColor = '#373b3e';  \n      document.body.style.color = 'black';\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been enabled\", \"success\");\n    }\n\n  }\n\n  return (\n    // if you want to add multiple tags inside a JSX you have to use following empty tag\n    <> \n      {/* below is the example of props. i.e. properties  */}\n      {/* <Router> */}\n      <Navbar title=\"TextFLex\" aboutText = 'About Us' mode={mode} toggleMode={toggleMode}/> \n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      {/* <Switch> */}\n        {/* components/home --> component 1\n            components/home/user --> component 2  */}\n          {/* <Route exact path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route> */}\n          {/* <Route exact path=\"/\">    */}\n            <TextForm showAlert={showAlert} Heading=\"Enter text here to Convert\" mode={mode}/>\n          {/* </Route> */}\n        {/* </Switch> */}\n    {/* </Router> */}\n      </div>\n    </>\n  );\n}\nexport default App;\n ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}